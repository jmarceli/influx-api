// @flow
import type { $AxiosXHR } from 'axios';

export type Consistency = 'any' | 'one' | 'quorum' | 'all';
export type Precision = 'ns' | 'u' | 'ms' | 's' | 'm' | 'h';
export type Chunked = true | number;
export type ResponseType = 'json' | 'csv' | 'msgpack';

export type UrlParams = {| host: string, ssl?: boolean, port?: number |};

declare interface InfluxParams {
  url: string,
  u?: string,
  p?: string,
}

export interface QueryParams<Type> extends InfluxParams {
  db?: string; // required for most SELECT and SHOW queries
  chunked?: Chunked;
  pretty?: boolean;
  q: string; // query without a query string makes no sense
  responseType?: Type;
  epoch?: Precision;
}
// export type QueryParams<ResponseType> = $QueryParams<ResponseType>;

export interface WriteParams extends InfluxParams {
  db: string; // required in case of write
  data: string; // Line Protocol compatible string
  precision?: Precision;
  consistency?: Consistency; // makes sense only with cluster
  rp?: string;
}

export type JSONResponse = { results: { series: { values: any[] }[] }[] };
export type InfluxResponse<Type> = $AxiosXHR<string, Type>;

declare export function query(params: QueryParams<'json'>): Promise<InfluxResponse<JSONResponse>>;
// eslint-disable-next-line no-redeclare
declare export function query(params: QueryParams<'csv'>): Promise<InfluxResponse<string>>;
// eslint-disable-next-line no-redeclare
declare export function query(params: QueryParams<'msgpack'>): Promise<InfluxResponse<string>>;
declare export function write(params: WriteParams): Promise<InfluxResponse<string>>;
declare export function buildUrl(params: UrlParams): string;
